import logging
import asyncio
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher

from config import Settings
from src.github.github_services.github_services import (
    get_latest_commit, 
    get_branch_commits,
    get_branches,
    get_pull_requests, 
    close_session, 
    format_commit_notification, 
    format_merge_notification
)

from src.notification.notification_services.notification_services import send_notification
from src.common import register_common_handlers

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)



last_commits = {}
last_pr_state = {}
last_check_time = datetime.now(timezone.utc)


async def check_commits(bot: Bot):
    global last_commits, last_check_time
    
    changes_detected = False
    current_time = datetime.now(timezone.utc)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫
        branches = await get_branches()
        if not branches:
            return False
        
        for branch in branches:
            branch_name = branch['name']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –≤ –≤–µ—Ç–∫–µ
            latest_commit = await get_latest_commit(branch_name)
            if not latest_commit:
                continue
                
            commit_sha = latest_commit['sha']
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–µ—Ç–∫–∏ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–º–º–∏—Ç
            if branch_name not in last_commits:
                last_commits[branch_name] = commit_sha
                continue
            
            # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if last_commits[branch_name] != commit_sha:
                notification = format_commit_notification(latest_commit, branch_name)
                await send_notification(bot, notification)
                changes_detected = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–º–∏—Ç –¥–ª—è –≤–µ—Ç–∫–∏
                last_commits[branch_name] = commit_sha
    
    except Exception as e:
        logger.error(f"Error checking commits: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    last_check_time = current_time
    return changes_detected


async def check_merges(bot: Bot):
    global last_pr_state
    
    prs = await get_pull_requests()
    changes_detected = False
    
    current_prs = {}
    for pr in prs:
        pr_number = pr['number']
        pr_merged = pr.get('merged', False)
        pr_updated_at = pr.get('updated_at')
        
        current_prs[pr_number] = {
            'merged': pr_merged,
            'title': pr['title'],
            'updated_at': pr_updated_at
        }
        
        # –ï—Å–ª–∏ PR –Ω–æ–≤—ã–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        if pr_number not in last_pr_state:
            continue
        
        old_state = last_pr_state[pr_number]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ PR –º–µ—Ä–¥–∂–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not old_state['merged'] and pr_merged:
            notification = format_merge_notification(pr)
            await send_notification(bot, notification)
            changes_detected = True
    
    last_pr_state = current_prs
    return changes_detected


async def check_updates(bot: Bot):
    try:
        logger.info("üîç Checking for updates...")
        
        commit_changes = await check_commits(bot)
        merge_changes = await check_merges(bot)
        
        if commit_changes or merge_changes:
            logger.info("‚úÖ Changes detected and notifications sent")
        else:
            logger.info("‚úÖ No changes detected")
            
    except Exception as e:
        logger.error(f"‚ùå Error in update check: {e}")


async def periodic_checker(bot: Bot):
    while True:
        try:
            await check_updates(bot)
            await asyncio.sleep(Settings.CHECK_INTERVAL)
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"Periodic checker error: {e}")
            await asyncio.sleep(60)


async def on_startup(bot: Bot):
    logger.info("üöÄ Bot starting up...")
    logger.info(f"üìÅ Tracking repository: {Settings.GITHUB_REPO}")
    logger.info(f"üë• Notification recipients: {len(Settings.CHAT_IDS)} users")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await initialize_tracking()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    asyncio.create_task(periodic_checker(bot))


async def initialize_tracking():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ –∏ PR"""
    global last_commits, last_pr_state
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ç–æ–∫
        branches = await get_branches()
        if branches:
            for branch in branches:
                branch_name = branch['name']
                latest_commit = await get_latest_commit(branch_name)
                if latest_commit:
                    last_commits[branch_name] = latest_commit['sha']
                    logger.info(f"üìù Tracking branch '{branch_name}': {latest_commit['sha'][:7]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PR
        prs = await get_pull_requests()
        for pr in prs:
            pr_number = pr['number']
            last_pr_state[pr_number] = {
                'merged': pr.get('merged', False),
                'title': pr['title'],
                'updated_at': pr.get('updated_at')
            }
            
        logger.info(f"üìä Initialized tracking for {len(last_commits)} branches and {len(last_pr_state)} PRs")
        
    except Exception as e:
        logger.error(f"Error initializing tracking: {e}")


async def on_shutdown(bot: Bot):
    logger.info("üõë Bot shutting down...")
    await close_session()


async def main():
    bot = Bot(token=Settings.BOT_TOKEN)
    dp = Dispatcher()
    
    register_common_handlers(dp)
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot stopped with error: {e}")


if __name__ == "__main__":
    asyncio.run(main())